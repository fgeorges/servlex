/****************************************************************************/
/*  File:       CalabashXProcPipeline.java                                  */
/*  Author:     F. Georges - H2O Consulting                                 */
/*  Date:       2010-09-05                                                  */
/*  Tags:                                                                   */
/*      Copyright (c) 2010 Florent Georges (see end of file.)               */
/* ------------------------------------------------------------------------ */


package org.expath.servlex.processors.saxon.components;

import com.xmlcalabash.core.XProcException;
import javax.xml.transform.SourceLocator;
import org.expath.servlex.ServerConfig;
import org.expath.servlex.ServlexException;
import org.expath.servlex.TechnicalException;
import org.expath.servlex.components.Component;
import org.expath.servlex.connectors.Connector;
import org.expath.servlex.processors.saxon.CalabashPipeline;
import org.expath.servlex.processors.saxon.CalabashXProc;
import org.expath.servlex.runtime.ComponentError;
import org.expath.servlex.tools.Auditor;
import org.expath.servlex.processors.saxon.CalabashHelper;
import org.expath.servlex.tools.Log;

/**
 * ...
 *
 * TODO: Define more precisely the response format.  It is not always easy to
 * generate a sequence of documents in XProc.  Sometimes it is way more convenient
 * to generate a single document wrapping the sequence (e.g. when the documents
 * are generated by a stylesheet).  We should then allow the following:
 *
 * <pre>
 *     &lt;web:wrapper>
 *        &lt;web:response>
 *           ...
 *        &lt;/web:response>
 *        ...
 *        The documents...
 *        ...
 *     &lt;/web:wrapper>
 * </pre>
 *
 * In addition, we have to define how to represent a binary or text content (in
 * XProc that's straightforward: use c:data).  It has to be clearly specified
 * and implemented here...
 *
 * @author Florent Georges
 */
public class CalabashXProcPipeline
        implements Component
{
    public CalabashXProcPipeline(CalabashXProc calabash, String pipe)
    {
        myCalabash = calabash;
        myPipe = pipe;
    }

    @Override
    public void cleanup(Auditor auditor)
            throws ServlexException
    {
        auditor.cleanup("calabash xproc pipeline");
        if ( myPipeline != null ) {
            myPipeline.cleanup(auditor);
        }
    }

    @Override
    public void logApplication(Log log)
    {
        log.debug("      XProc Pipeline:");
        log.debug("         pipe: " + myPipe);
    }

    /**
     * ...
     * 
     * TODO: XPipeline is not cacheable (this is the runtime object).  It is
     * not clear to me what I can use to cache the compiled version (nor whether
     * it is possible at all).  See the email I've sent to XProc-Dev at
     * http://xproc.markmail.org/thread/dhftopkqt6peofcm.
     *
     * The answer is that XPipeline is both the compiled form and the dynamic
     * evaluation representation.  It can be reset thought, but not used
     * concurrently.  So either we compile it every time, or we create some
     * pools of pipeline.  Honestly, I don't think it is worth spending resource
     * on that now.  Most likely the next version of Calabash (well, the v2)
     * will have a much cleaner distinction between compile- and evaluation-time
     * objects (see the above-mentioned thread on XProc-Dev).
     */
    @Override
    public Connector run(Connector connector, ServerConfig config, Auditor auditor)
            throws ServlexException
                 , ComponentError
    {
        auditor.run("pipeline");
        try {
            myPipeline = myCalabash.prepare(auditor);
            myPipeline.compile(myPipe);
            return myPipeline.evaluate(connector);
        }
        catch ( XProcException ex ) {
            SourceLocator loc = ex.getLocator();
            LOG.error("User error in pipeline at " + loc.getSystemId() + ":" + loc.getLineNumber(), ex);
            try {
                throw CalabashHelper.makeError(ex);
            }
            catch ( TechnicalException exx ) {
                throw new ServlexException(500, "Error creating the component error for a Calabash pipeline", exx);
            }
        }
    }

    /** The logger. */
    private static final Log LOG = new Log(CalabashXProcPipeline.class);

    private CalabashXProc myCalabash;
    private String myPipe;
    private CalabashPipeline myPipeline;
}


/* ------------------------------------------------------------------------ */
/*  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS COMMENT.               */
/*                                                                          */
/*  The contents of this file are subject to the Mozilla Public License     */
/*  Version 1.0 (the "License"); you may not use this file except in        */
/*  compliance with the License. You may obtain a copy of the License at    */
/*  http://www.mozilla.org/MPL/.                                            */
/*                                                                          */
/*  Software distributed under the License is distributed on an "AS IS"     */
/*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See    */
/*  the License for the specific language governing rights and limitations  */
/*  under the License.                                                      */
/*                                                                          */
/*  The Original Code is: all this file.                                    */
/*                                                                          */
/*  The Initial Developer of the Original Code is Florent Georges.          */
/*                                                                          */
/*  Contributor(s): none.                                                   */
/* ------------------------------------------------------------------------ */

<?xml version="1.0" encoding="UTF-8"?>

<!--
    This usage of @stylesheet is because we are not testing a stylesheet
    actually, but we need this import statement in the compiled suite.  So...
    
    We should rather add support for testing webapps using XSpec a first-class
    citizen support...
-->

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               xmlns:h="http://www.w3.org/1999/xhtml"
               xmlns:http="http://expath.org/ns/http-client"
               stylesheet="http://expath.org/ns/http-client.xsl">

   <x:variable name="uri" select="'http://localhost:9090/servlex/filters-app'"/>

   <x:scenario label="assertions" shared="yes">
      <!-- first result item must be a http:response element -->
      <x:expect label="result elem"   assert="$x:result[1] instance of element(http:response)"/>
      <!-- its status attribute must be = 200 -->
      <x:expect label="status is 200" assert="$x:result[1]/xs:integer(@status) eq 200"/>
      <!-- in any way for a request test, the server must send back an
           ML document, so the result sequence must have exactly 2
           items (the http:response element, and the XML payload) -->
      <x:expect label="result count"  assert="count($x:result) eq 2"/>
      <!-- result is a HTML document -->
      <x:expect label="content type"  assert="
          matches(
            $x:result[1]/http:header[@name eq 'content-type']/@value,
            'application/xhtml\+xml(;charset=UTF-8)?')"/>
      <x:expect label="document type" assert="
          $x:result[2] instance of document-node(element(h:html))"/>
   </x:scenario>

   <x:scenario label="filters-app-001">
      <x:call function="http:send-request">
         <x:param>
            <http:request href="{ $uri }/servlet?who=me" method="get"/>
         </x:param>
      </x:call>
      <x:like label="assertions"/>
      <x:variable name="html" select="$x:result[2]/h:html"/>
      <x:expect label="filtered"   context="$html/h:head/h:title">
         <h:title>(in 1) (in 2) (in 3) Hello, me! (out 3) (out 2) (out1)</h:title>
      </x:expect>
      <x:expect label="body title" context="$html/h:body/h:p">
         <h:p>(in 1) (in 2) (in 3) Hello, me! (out 3) (out 2) (out1)</h:p>
      </x:expect>
   </x:scenario>

</x:description>
